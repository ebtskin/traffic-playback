{"version":3,"sources":["Components/Body/BodyModule.js","Components/ComponentTemplates/TemplateStyles.js","Components/Nav/Navbar.js","Components/Playback/Routes.js","Components/ComponentTemplates/HTTPServices/HTTPClientEndPoint.js","Components/ComponentTemplates/HTTPServices/HTTPClientFunctions.js","Components/ComponentTemplates/HTTPServices/HTTPServiceButton.js","Components/ComponentTemplates/RunPlaybackForm.js","Components/ComponentTemplates/RunJobs.js","Components/ConfigureJob/configureJob.js","Components/StatisticSite/TrafficStatistic.js","Components/StatisticSite/RealTime.js","Components/ComponentTemplates/BackNavButton.js","Components/ComponentTemplates/CreateJob.js","Components/Playback/Playback.js","App.js","serviceWorker.js","index.js","Components/StatisticSite/TrafficStatistic.module.css"],"names":["Body","props","className","this","children","React","Component","TemplateStyles","RouteButton","BackNavButton","HTTPServiceButton","NavBar","NavButton","BackNavHeading","BackNavHeadingRow","NavHeadingButtons","Heading","rowHeading","listingHeader","listingStyle","listingWrapper","jobListing","buttonClass","onClick","e","navDrawerButtonClick","RetractedNavContents","Fragment","ExtendedNavContents","keyIndex","linkArray","navLinks","map","link","key","to","route","title","state","extended","bind","setState","nav_contents","Routes","init","port","run","createjob","HTTPClientEndPoint","keyHandlerStore","handlerFunction","data","keyTypeCheck","undefined","Object","HTTPClientFunctions","resp","a","fetch","then","json","reRender","err","jobs","runplayback","status","APIEndpoint","HTTPServiceClient","method","headers","body","JSON","stringify","processHTTPresponse","alert","history","useHistory","sendRequest","APIEndPoint","HTTPService","reRoute","push","RunPlaybackForm","buildForm","keys","name","type","value","onChange","placeholder","Date","jobId","verbose","playbackSpeed","securePort","requestBufferTime","hostname","backendServer","window","scrollTo","preventDefault","inputName","target","stateValue","invalidCharTest","test","httpButtons","HTTPButtons","button","callMeMaybe","RunJobs","renderRunForm","selectedJobId","renderForm","runClick","selectedJobData","renderList","list","length","listWrapper","render","TrafficStatistic","componentDidMount","res","ok","Promise","reject","result","console","log","error","catch","style","StatsTable","handleRow","uri","total","textAlign","content","nextProps","resultArray","forEach","row","sort","b","getSummarizedData","tableContainer","Alert","variant","alertBox","Table","striped","bordered","hover","size","myTable","lineColors","options","responsive","scales","xAxes","display","scaleLabel","labelString","yAxes","StatsChart","handleUpdate","i","lineData","labels","datasets","label","traffic","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","chartContainer","lineHandler","StatsChartOptionsBar","handleCheckBox","event","id","split","checked","selectedUri","maxSelectedUri","errorText","index","indexOf","splice","handleFilter","toLowerCase","visible","uriListVisible","uriList","setDate","startDate","endDate","handleApply","applyLoading","setTimeout","start","end","requestedUri","startDateStr","toString","join","unixStart","getTime","endDateStr","getDate","unixEnd","numDays","current","getMonth","unixTimeLabels","zeros","unixTimeRange","unixTime","utime","j","next","k","pop","getDataFromTimeRange","handleAlert","receivedData","getUriList","num","item","itemNone","Form","Check","checkBox","optionContainer","Row","Col","sm","md","lg","htmlFor","optionLabel","Control","dateInput","disabled","xs","Dropdown","Toggle","dropdownBtn","Menu","dropdownMenu","Divider","Button","applyBtn","Spinner","animation","onClose","dismissible","RealTimeMonitor","getRealTimeData","loading","handleGet","ms","realtimeHandler","setInterval","handleRemove","clearInterval","newMs","interval","handleRefresh","msHandler","refreshHandler","RealTimeTable","handleContent","rowTime","date","getHours","getMinutes","getSeconds","col","columnEnabled","jobID","host","maxWidth","protocol","secure","sourceip","header","addCheckBoxes","remainTime","updateTime","handleUpdateTime","selectedIndex","s","parseInt","never","handleRefreshTimeDisplay","handleRemoveRefresh","refreshTimeHandler","as","defaultValue","goBack","CreateJob","httpServiceButton","jobName","active","jobStart","jobStop","stateNumberValue","Number","PlayBack","registerUrlStateHandler","Navbar","exact","path","component","App","Boolean","location","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.ee72437a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./BodyModuleStyle.css\";\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div\n        className={\"app-body w-100 container-sm app-body align-items-center\"}\n      >\n        <div className=\"body\">{this.props.children}</div>\n      </div>\n    );\n  }\n}\n\nexport default Body;\n","//This class contains javascript string that describe the styles for Template components.\n//I tossed in some styles as a quick fix, but this will be done throughly properly when\n// the time comes.\nclass TemplateStyles {\n  static RouteButton = \"col-2 btn btn-sm btn-primary\";\n  static BackNavButton = \"btn btn-sm btn-success col-1\";\n  static HTTPServiceButton = \"btn btn-sm btn-info\";\n  static NavBar = \"navbar navbar-expand-xl fixed-top nav-bar-custom \";\n  static NavButton = \"nav-button button\";\n  static BackNavHeading = \"col-9 generic-heading yellow\";\n  static BackNavHeadingRow = \"row justify-content-end align-items-center\";\n  static NavHeadingButtons =\n    \"col-12 col-md-6 row justify-content-start align-items-center\";\n  static Heading =\n    \"col-12 col-md-6 row justify-content-start align-items-center dark-blue\";\n  static rowHeading = \"row row-heading\";\n  static listingHeader = \"yellow\";\n  static listingStyle = \"row align-center justify-center listing-style\";\n  static listingWrapper = \"listing-wrapper\";\n  static jobListing = \"col-8\";\n}\n\nexport default TemplateStyles;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport TemplateStyles from \"../ComponentTemplates/TemplateStyles\";\n\n//This stateless  component returns the navbutton of the navbar.\nfunction NavButton(props) {\n  return (\n    <div\n      className={props.buttonClass}\n      onClick={e => props.navDrawerButtonClick(e)}\n    >\n      {\"\"}\n    </div>\n  );\n}\n\n//This stateless component returns the contents of the navbar when it is retracted.\nfunction RetractedNavContents(props) {\n  return (\n    <React.Fragment>\n      <NavButton\n        buttonClass={props.buttonClass}\n        navDrawerButtonClick={props.navDrawerButtonClick}\n      />\n      <span className=\"light-red\">App={\"{--Playback--}\"}</span>\n      <div className=\"white\">. . .</div>\n    </React.Fragment>\n  );\n}\n//This component returns rendered contents for the navdrawer when it is extended.\nfunction ExtendedNavContents(props) {\n  var keyIndex = 0;\n\n  const linkArray = props.navLinks.map(link => {\n    keyIndex++;\n\n    return (\n      <li key={keyIndex} className=\"nav-link link\">\n        <Link to={link.route}>\n          <span className=\"white\">{\"{\"}</span>\n          <span onClick={props.navDrawerButtonClick} className=\"yellow\">\n            {link.title}\n          </span>\n          <span className=\"white\">{\"};\"}</span>\n        </Link>\n      </li>\n    );\n  });\n\n  return (\n    <React.Fragment>\n      <NavButton\n        buttonClass={props.buttonClass}\n        navDrawerButtonClick={props.navDrawerButtonClick}\n      />\n      <ul>{linkArray}</ul>\n    </React.Fragment>\n  );\n}\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { extended: false };\n    this.navDrawerButtonClick = this.navDrawerButtonClick.bind(this);\n  }\n\n  navDrawerButtonClick() {\n    this.setState({ extended: !this.state.extended });\n  }\n\n  render() {\n    var nav_contents = this.state.extended ? (\n      <ExtendedNavContents\n        navLinks={this.props.navLinks}\n        buttonClass={TemplateStyles.NavButton}\n        navDrawerButtonClick={this.navDrawerButtonClick}\n      />\n    ) : (\n      <RetractedNavContents\n        buttonClass={TemplateStyles.NavButton}\n        navDrawerButtonClick={this.navDrawerButtonClick}\n      />\n    );\n\n    return <nav className={TemplateStyles.NavBar}>{nav_contents}</nav>;\n  }\n}\n\nexport default NavBar;\n","class Routes {\n  static port = \"7999\";\n  static init = \"http://localhost:\" + Routes.port + \"/api/init\";\n  static run = \"http://localhost:\" + Routes.port + \"/api/play/run\";\n  static createjob = \"http://localhost:\" + Routes.port + \"/api/createjob\";\n}\n\nexport default Routes;\n","//This class will be responsible for processing data sent from the server\n//to the client. An instance of this class will be part of the playback's component state.\n// More elaborate descrptions avsailable below.\n\nimport Routes from \"../../Playback/Routes\";\nclass HTTPClientEndPoint {\n  constructor(setState) {\n    //this.setState holds a reference to the state object\n    this.setState = setState;\n    this.keyHandlerStore = {};\n    //init is called to pull data needed to init the app from the\n  }\n\n  //This function maps key (most likely urls) -> handler functions\n  // When  a HTTPServiceComponent sends a request to a specific url on the\n  //server it will recieve a response which should also have a copy of said specific url value\n  // This function registers a handler function which can then be used to process data\n  // sent as the result of sending requests to a specific url. For example, GET /routelist will may return a route list [route1,route2,route3],\n  // and handlerfunction can be used to process that route list and pass it off to appstate.\n  registerUrlStateHandler(key, handlerFunction) {\n    //Here I check that the url/key is a string type and that\n    //handlerfunction is indeed a function object.\n    let urlTypeCheck = typeof key === \"string\";\n\n    //if both checks pass, then assign the function as a callback to the handlerstore.\n    if (urlTypeCheck) this.keyHandlerStore[key] = handlerFunction;\n  }\n\n  processHTTPresponse(key, data) {\n    //Here, I check that type of url is string, and\n    // I have forgone checking the data for now.\n    // I don't know if there are scenarious where data\n    // could be empty and yet we would still like to run\n    //  a particular handler mapped to a key.\n    let success = false; // used to return the success of promises/handlerfunction calls\n    let keyTypeCheck = typeof key === \"string\";\n    let handlerFunction = this.keyHandlerStore[key];\n    let functionTypeCheck =\n      handlerFunction !== undefined && handlerFunction instanceof Object;\n\n    //if key and handlerfunction are valid.,\n    if (keyTypeCheck && functionTypeCheck) {\n      success = handlerFunction(data); //pass off data to handlerfunction which should update playback state.\n\n      return success;\n    }\n  }\n\n  init = () => {\n    return this.keyHandlerStore[Routes.init]();\n  };\n}\n\nexport default HTTPClientEndPoint;\n","import Routes from \"../../Playback/Routes\";\n\nclass HTTPClientFunctions {\n  //The init function loads urls and jobs from the database.\n  // Anytime this function is called the app,  updates route\n  //settings to match the new server data obtained from the json\n  static init = async function(resp) {\n    return fetch(Routes.init).then(\n      resp => {\n        return resp.json().then(json => {\n          json.reRender = true;\n          return json;\n        });\n      },\n      err => {\n        return {\n          reRender: true,\n          jobs: []\n        };\n      }\n    );\n  };\n\n  //This function returns a true/false which indicates whether or not running a new\n  //job is succesful.\n  static runplayback = function(resp) {\n    if (resp && resp.status === 200) return true;\n    else return false;\n  };\n\n  //This function returns a true/false which indicates whether or not creating a new job\n  //job is succesful.\n  static createjob = function(resp) {\n    if (resp && resp.status === 200) return true;\n    else return false;\n  };\n}\n\nexport default HTTPClientFunctions;\n","import React from \"react\";\nimport TemplateStyles from \"../TemplateStyles.js\";\nimport { useHistory } from \"react-router-dom\";\n\n//This function will most likely get its own .js file since I anticipate\n// we may have additional HTTPServiceXXXXXX Components, but for now it is parked\n//here.\nasync function sendRequest(APIEndpoint, data, HTTPServiceClient) {\n  //DEBUG\n  //send an http request to the server.\n  return fetch(APIEndpoint, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  }).then(\n    //get the response\n    resp => {\n      //process the http response in the HTTPServiceClient object,\n      //if the route does not have a handler assigned to the route.\n      //calling this function has no effect.\n      return HTTPServiceClient.processHTTPresponse(APIEndpoint, resp);\n    },\n    err => {\n      //I have not written code for handling errors yet.\n      //Most likely, ill add proccesHTTPerror function to the HTTPClientEndPoint class.\n      alert(\"placeholder error logging\" + err);\n      return false;\n    }\n  );\n}\n\n//This button onClick method sends a request to the server. The server's response\n//is caught by the XMLHTTP request in the send request function. The response\n//is then passed off to the HTTPServiceCLient which will update the apps state\n//accordingly.\nfunction HTTPServiceButton(props) {\n  let history = useHistory();\n  return (\n    <button\n      onClick={() => {\n        sendRequest(props.APIEndPoint, props.data, props.HTTPService).then(\n          reRoute => {\n            if (reRoute) {\n              history.push(props.route || \"/\");\n            } else\n              alert(\n                \"Something went wrong. We're working on better way of notifying the user of failure.\"\n              );\n          }\n        );\n      }}\n      className={TemplateStyles.HTTPServiceButton}\n    >\n      {props.children || \"Send Request\"}\n    </button>\n  );\n}\n\nexport default HTTPServiceButton;\n","import React from \"react\";\nimport HTTPServiceButton from \"./HTTPServices/HTTPServiceButton\";\nimport TemplateStyles from \"./TemplateStyles\";\n\nclass RunPlaybackForm extends React.Component {\n  constructor(props) {\n    super(props);\n    let now = new Date();\n\n    this.state = {\n      jobId: props.jobId,\n      verbose: 0,\n      playbackSpeed: 1,\n      port: 8080,\n      securePort: 443,\n      requestBufferTime: 10000,\n      hostname: \"localhost\",\n      backendServer: 1\n    };\n    this.onChange = this.onChange.bind(this);\n    window.scrollTo(0, 0);\n  }\n\n  onChange(e) {\n    e.preventDefault();\n    let inputName = e.target.name;\n    let stateValue = e.target.value;\n    //if no invalid chars are detected\n    let invalidCharTest = /[^1234567890]/g.test(stateValue);\n\n    if (inputName === \"hostname\") {\n      this.setState({ hostname: stateValue });\n    } else if (!invalidCharTest) {\n      switch (inputName) {\n        case \"verbose\":\n          this.setState({ verbose: stateValue });\n          break;\n        case \"playbackSpeed\":\n          this.setState({ playbackSpeed: stateValue });\n          break;\n        case \"port\":\n          this.setState({ port: stateValue });\n          break;\n        case \"securePort\":\n          this.setState({ securePort: stateValue });\n          break;\n        case \"requestBufferTime\":\n          this.setState({ requestBufferTime: stateValue });\n          break;\n        case \"hostname\":\n          this.setState({ hostname: stateValue });\n          break;\n        case \"backendServer\":\n          this.setState({ backendServer: stateValue });\n          break;\n      }\n    }\n  }\n\n  buildForm = () => {\n    // This function builds a dynamic form.\n    let keys = Object.keys(this.state);\n\n    let form = keys.map(key => {\n      //Never give the user the ability to set jobId\n      //return null in that case\n      if (key === \"jobId\") return null;\n\n      return (\n        <React.Fragment>\n          <h2>{key}</h2>\n          <input\n            name={key}\n            type=\"text\"\n            value={this.state[key]}\n            onChange={e => this.onChange(e)}\n            placeholder=\"enter a value\"\n          />\n        </React.Fragment>\n      );\n    });\n    return form;\n  };\n  render() {\n    let retVal = null;\n    let keyIndex = 0;\n    let httpButtons = this.props.HTTPButtons.map(button => {\n      keyIndex = keyIndex + 1;\n\n      return (\n        <HTTPServiceButton\n          callMeMaybe={this.props.callMeMaybe}\n          HTTPService={button.HTTPService}\n          APIEndPoint={button.APIEndPoint}\n          data={this.state}\n          key={keyIndex}\n          route={\"/\"}\n        >\n          Run Job\n        </HTTPServiceButton>\n      );\n    });\n\n    retVal = (\n      <div>\n        {this.buildForm()}\n        {httpButtons}\n        <input\n          type=\"button\"\n          className={TemplateStyles.BackNavButton}\n          onClick={this.props.callMeMaybe}\n          value=\"Back\"\n        />\n      </div>\n    );\n\n    return retVal;\n  }\n}\n\nexport default RunPlaybackForm;\n","import React from \"react\";\nimport RunPlaybackForm from \"./RunPlaybackForm\";\nimport TemplateStyles from \"./TemplateStyles\";\nimport Routes from \"../Playback/Routes\";\n\nclass RunJobs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      renderRunForm: false,\n      selectedJobId: 0,\n      jobs: props.jobs\n    };\n  }\n\n  callMeMaybe = () => {\n    this.setState({\n      renderRunForm: false,\n      selectedJobId: 0\n    });\n  };\n  renderForm = () => {\n    return (\n      <RunPlaybackForm\n        callMeMaybe={this.callMeMaybe}\n        jobId={this.state.selectedJobId}\n        HTTPButtons={[\n          {\n            APIEndPoint: Routes.run,\n            data: this.state.selectedJobId,\n            HTTPService: this.props.HTTPService,\n            route: \"/\"\n          }\n        ]}\n      />\n    );\n  };\n\n  runClick = e => {\n    this.setState({ renderRunForm: true, selectedJobData: e.target.data });\n  };\n  renderList = () => {\n    let list = <div>No Completed Playback jobs discovered.</div>;\n\n    if (\n      this.props.jobs !== null &&\n      this.props.jobs !== undefined &&\n      this.props.jobs.length > 0\n    ) {\n      list = this.props.jobs.map(jobId => {\n        return (\n          <div key={jobId} className={TemplateStyles.listingStyle}>\n            <div className={TemplateStyles.jobListing}>JobID: {jobId}</div>\n            <input\n              type=\"button\"\n              value=\"Deploy Job\"\n              className={TemplateStyles.RouteButton}\n              onClick={e => {\n                this.setState({\n                  renderRunForm: true,\n                  selectedJobId: jobId\n                });\n              }}\n            />\n          </div>\n        );\n      });\n    }\n\n    return (\n      <section className={TemplateStyles.listWrapper}>\n        <h1 className={TemplateStyles.listingHeader}>---Jobs Discovered---</h1>\n        {list}\n      </section>\n    );\n  };\n\n  render = () => {\n    return this.state.renderRunForm ? this.renderForm() : this.renderList();\n  };\n}\n\nexport default RunJobs;\n","import React from \"react\";\r\nimport \"./configureJobStyles.css\";\r\n\r\nclass ConfigureJob extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            pbspeed : '1'\r\n        };\r\n    }\r\n\r\n    changePBSpeed = (e) => {\r\n        this.setState({pbspeed : e.target.value});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Configure Job</h1>\r\n\r\n                <form action='./index.js'>\r\n                    <label for='pbspeed'>Playback Speed = </label>\r\n                    <input type='number' min='0' step='0.1' value={this.state.pbspeed} \r\n                    id='pbspeed' name='pbspeed' onChange={this.changePBSpeed}></input>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfigureJob;\r\n","import React from 'react';\nimport { Dropdown, Table, Form, Button, Spinner, Row, Col, Alert } from 'react-bootstrap';\nimport style from './TrafficStatistic.module.css';\nimport { Line } from 'react-chartjs-2';\n\nclass TrafficStatistic extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null, \n            error: false,\n        };\n    }\n\n    componentDidMount = () => {\n        fetch('http://ec2-54-152-230-158.compute-1.amazonaws.com:8000/api/play')\n            .then((res) => {\n                if (res.json) {\n                    return res.json().then((json) => {\n                        return res.ok ? json : Promise.reject(json);\n                    });\n                } else {\n                    Promise.reject('No JSON exist!');\n                }\n            })\n            .then((result) => {\n                console.log(result);\n                this.setState({ data: result, error: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({ error: true });\n            });\n    }\n    \n    render() {\n        return (\n            <div>\n                <h1 className={style.title}>My Traffic Statistics</h1>\n                <hr></hr>\n                <StatsTable data={this.state.data} error={this.state.error} />\n                <StatsChart data={this.state.data} />\n            </div>\n        );\n    }\n}\n\n\nclass StatsTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: []\n        };\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.data) {\n            let content = [];\n            let result = getSummarizedData(nextProps.data);\n            result.forEach(res => {\n                content.push(this.handleRow(res.uri, res.total));\n            });\n            this.setState({ content: content });\n        }\n    }\n\n    handleRow = (uri, total) => {\n        return (\n            <tr key={uri}>\n                <td>{uri}</td>\n                <td style={{ textAlign: 'center' }}>{total}</td>\n            </tr>\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <h2 className={style.title}>Traffic Summary</h2>\n                <div className={style.tableContainer}>\n                    {!this.props.error\n                        ?\n                        <Table striped bordered hover size=\"sm\" variant=\"dark\" className={style.myTable}>\n                            <thead>\n                                <tr>\n                                    <th >URI</th>\n                                    <th style={{textAlign: 'center'}} >Total Requests</th>\n                                </tr>\n                            </thead>\n                            <tbody>{this.state.content}</tbody>\n                        </Table>\n                        :\n                        <Alert\n                            variant=\"danger\"\n                            className={style.alertBox}\n                        >\n                            <Alert.Heading>Error</Alert.Heading>\n                            <p>Server Not Connected!</p>\n                        </Alert>\n                    }\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst lineColors = [\n    'rgb(237, 41, 58)',\n    'rgba(75,192,192,1)',\n    'rgba(230,54,192,1)',\n    'rgb(100, 53, 201)',\n    'rgb(33, 133, 208)',\n];\n\nconst options = {\n    responsive: true,\n    scales: {\n        xAxes: [{\n            display: true,\n            scaleLabel: {\n                display: true,\n                labelString: 'Dates'\n            },\n        }],\n        yAxes: [{\n            display: true,\n            scaleLabel: {\n                display: true,\n                labelString: '# of Requests'\n            }\n        }]\n    }\n};\n\nclass StatsChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lineData: {},\n        };\n    }\n\n    // handle new request and update the line chart, result param received from StatsChartOptionsBar.\n    handleUpdate = (result) => {\n        if (!result) return null;\n        let i = 0;\n        // update data to the line chart\n        let lineData = {};\n        lineData.datasets = [];\n        lineData.labels = result.labels;\n        result.data.forEach((uri) => {\n            lineData.datasets.push({\n                label: `uri(${uri.name})`,\n                data: uri.traffic,\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: lineColors[i],\n                borderColor: lineColors[i],\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: lineColors[i],\n                pointBackgroundColor: '#fff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: lineColors[i],\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 10,\n            });\n            ++i;\n        });\n        this.setState({ lineData: lineData });\n    };\n\n    render() {\n        return (\n            <div className={style.chartContainer}>\n                <h2 className={style.title}>Traffic Analysis Chart</h2>\n                <StatsChartOptionsBar\n                    data={this.props.data}\n                    lineHandler={this.handleUpdate}\n                />\n                <hr></hr>\n                <Line data={this.state.lineData} options={options} />\n            </div>\n        );\n    }\n}\n\n\nclass StatsChartOptionsBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            uriList: ['/home', '/home/uri', '/traffic/abc/dsassfcsaaaaaaaaa', '/hello', '/hi', '/abc'],\n            uriListVisible: [true, true, true, true, true, true],\n            applyLoading: false,\n            error: false,\n            errorText: 'Something wrong!',\n        };\n        this.maxSelectedUri = 5;\n        this.selectedUri = [];\n        this.startDate = '';\n        this.endDate = '';\n        this.receivedData = false;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.receivedData === false) {\n            if (nextProps.data) {\n                let uriList = getUriList(nextProps.data);\n                let num = uriList.length;\n                let visible = [];\n                for (let i = 0; i < num; ++i) visible.push(true);\n                this.setState({\n                    uriList: uriList.sort(),\n                    uriListVisible: visible,\n                });\n                this.receivedData = true;\n            }\n        }\n    }\n\n    // record checked checkbox value.\n    handleCheckBox = (event) => {\n        if (event.target.id) {\n            let id = event.target.id;\n            let uripart = id.split('::');\n            let uri = uripart[1];\n            if (uri && uri !== '') {\n                if (event.target.checked === true) {\n                    // allow maximum of 5 uris selected.\n                    if (this.selectedUri.length >= this.maxSelectedUri) {\n                        event.target.checked = false;\n                        this.setState({\n                            error: true,\n                            errorText: 'Only maximum of 5 URIs allowed',\n                        });\n                    } else {\n                        this.selectedUri.push(uri);\n                    }\n                } else {\n                    let index = this.selectedUri.indexOf(uri);\n                    if (index > -1) {\n                        this.selectedUri.splice(index, 1);\n                    }\n                }\n            }\n        }\n    };\n\n    // handle uri filter in the uri dropdown.\n    handleFilter = (event) => {\n        let value = event.target.value.toLowerCase();\n        let visible = this.state.uriListVisible;\n        for (let i = 0; i < this.state.uriList.length; ++i) {\n            if (this.state.uriList[i].toLowerCase().indexOf(value) > -1) {\n                visible[i] = true;\n            } else {\n                visible[i] = false;\n            }\n        }\n        this.setState({ uriListVisible: visible });\n    };\n\n    // set date onchange\n    setDate = (e) => {\n        if (e.target.id === 'start-date') {\n            this.startDate = e.target.value;\n        } else {\n            this.endDate = e.target.value;\n        }\n    };\n\n    // apply and process custom filters and send result to the line chart.\n    handleApply = () => {\n        console.log(this.selectedUri);\n        console.log(this.startDate);\n        console.log(this.endDate);\n        if (this.endDate === '' || this.startDate === '' || this.selectedUri.length === 0) {\n            this.setState({\n                error: true,\n                errorText: 'Some information is empty.'\n            });\n            return null;\n        }\n        if (this.endDate < this.startDate) {\n            this.setState({\n                error: true,\n                errorText: 'Error! End date is greater than start date!',\n            });\n            return null;\n        }\n        this.setState({ applyLoading: true });\n        setTimeout(() => {\n            if (this.props.data) {\n                let result = getDataFromTimeRange(this.startDate, this.endDate, this.selectedUri, this.props.data);\n                this.props.lineHandler(result);\n                this.setState({ error: false });\n            } else {\n                this.setState({\n                    error: true,\n                    errorText: 'Internal Error! Database Not Connected!',\n                });\n            }\n            this.setState({ applyLoading: false });\n        }, 600);\n    };\n\n    handleAlert = () => {\n        this.setState({ error: false });\n    }\n\n    render() {\n        const content = [];\n        for (let i = 0; i < this.state.uriList.length; ++i) {\n            let uri = this.state.uriList[i];\n            content.push(\n                <div\n                    className={this.state.uriListVisible[i] ? style.item : style.itemNone}\n                    key={uri}\n                >\n                    <Form.Check\n                        onChange={this.handleCheckBox}\n                        type={'checkbox'}\n                        id={`uri::${uri}`}\n                        label={`${uri}`}\n                        className={style.checkBox}\n                    />\n                </div>\n            );\n        }\n        return (\n            <div className={style.optionContainer}>\n                <Row>\n                    <Col sm={12} md={6} lg={3}>\n                        <label\n                            htmlFor=\"start-date\"\n                            className={style.optionLabel}\n                        >\n                            Start Date:\n                        </label>\n                        <Form.Control\n                            type=\"date\"\n                            id=\"start-date\"\n                            className={style.dateInput}\n                            onChange={this.setDate}\n                            disabled={this.state.applyLoading ? true : false}\n                        />\n                    </Col>\n                    <Col sm={12} md={6} lg={3}>\n                        <label htmlFor=\"end-date\" className={style.optionLabel}>\n                            End Date:\n                        </label>\n                        <Form.Control\n                            type=\"date\"\n                            id=\"end-date\"\n                            className={style.dateInput}\n                            onChange={this.setDate}\n                            disabled={this.state.applyLoading ? true : false}\n                        />\n                    </Col>\n                    <Col xs={12} sm={6} lg={3}>\n                        <label\n                            htmlFor=\"stat-dropdown\"\n                            className={style.optionLabel}\n                        >\n                            Select Uri:\n                        </label>\n                        <Dropdown>\n                            <Dropdown.Toggle\n                                variant=\"outline-info\"\n                                id=\"stat-dropdown\"\n                                disabled={this.state.applyLoading ? true : false}\n                                className={style.dropdownBtn}\n                            >\n                                Select URI\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className={style.dropdownMenu}>\n                                <div className={style.item}>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Filter uri ...\"\n                                        onChange={this.handleFilter}\n                                    />\n                                </div>\n                                <Dropdown.Divider />\n                                {content}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col xs={12} sm={6} lg={3}>\n                        <label htmlFor=\"apply\" className={style.optionLabel}>\n                            Apply Change:\n                        </label>\n                        <Button\n                            variant=\"info\"\n                            id=\"apply\"\n                            className={style.applyBtn}\n                            onClick={this.handleApply}\n                            disabled={this.state.applyLoading ? true : false}\n                        >\n                            {this.state.applyLoading ? (\n                                <Spinner animation=\"grow\" size=\"sm\" />\n                            ) : (\n                                'Apply'\n                            )}\n                        </Button>\n                    </Col>\n                </Row>\n\n                {this.state.error && (\n                    <Alert\n                        variant=\"danger\"\n                        onClose={this.handleAlert}\n                        dismissible\n                        className={style.alertBox}\n                    >\n                        <Alert.Heading>Error</Alert.Heading>\n                        <p>{this.state.errorText}</p>\n                    </Alert>\n                )}\n            </div>\n        );\n    }\n}\n\n// get a list of different uris from data that fetched from the database.\nfunction getUriList(data) {\n    let uriList = [];\n    if (data) {\n        data.forEach((row) => {\n            let uri = row.uri;\n            // uriList acts as set.\n            if (uriList.indexOf(uri) === -1) {\n                uriList.push(uri);\n            }\n        });\n    }\n    return uriList;\n}\n\n// summarize all uris with the total number of requests received so far.\nfunction getSummarizedData(data) {\n    let resultArray = null;\n    if (data) {\n        let result = {};\n        data.forEach(row => {\n            let uri = row.uri;\n            if (result[uri]) {\n                result[uri] += 1;\n            } else {\n                result[uri] = 1;\n            }\n        });\n        resultArray = [];\n        Object.keys(result).forEach(uri => {\n            resultArray.push({\n                uri: uri,\n                total: result[uri],\n            });\n        });\n        resultArray.sort((a, b) => {\n            if (a.total < b.total)\n                return 1;\n            if (a.total > b.total)\n                return -1;\n            return 0;\n        });\n        return resultArray;\n    }\n    return null; \n}\n\n// get total request number on each day for each requested uri from the given time range.\nfunction getDataFromTimeRange(start, end, requestedUri, data) {\n    if (!data) {\n        return null;\n    }\n    let startDateStr = start.toString().split('-').join('.');\n    let startDate = new Date(startDateStr);\n    let unixStart = startDate.getTime();\n    let endDateStr = end.toString().split('-').join('.');\n    let endDate = new Date(endDateStr);\n    endDate.setDate(endDate.getDate() + 1);\n    let unixEnd = endDate.getTime();\n    let numDays = 0;\n\n    let result = {};\n    result.data = [];\n    result.labels = [];\n    result.unixTimeLabels = [];\n\n    let current = new Date(startDateStr);\n    while (current <= endDate) {\n        ++numDays;\n        let label = `${current.getMonth() + 1}-${current.getDate()}`;\n        result.labels.push(label);\n        result.unixTimeLabels.push(current.getTime());\n        current.setDate(current.getDate() + 1);\n    }\n    numDays -= 1;\n    // console.log('num day == ' + numDays);\n\n    let zeros = [];\n    for (let i = 0; i < numDays; ++i)\n        zeros.push(0);\n\n    requestedUri.forEach(uri => {\n        result.data.push({\n            name: uri,\n            traffic: [...zeros],\n        });\n    });\n\n    let unixTimeRange = result.unixTimeLabels;\n\n    for (let i = 0; i < data.length; ++i) {\n        let unixTime = data[i].utime * 1000;\n        if (unixTime < unixStart || unixTime >= unixEnd) {\n            // out of range, skip to next data row.\n            continue;\n        }\n\n        let uri = data[i].uri;\n        // console.log('on i = ' +  i + '  ' + uri);\n        for (let j = 0; j < numDays; ++j) {\n            let current = unixTimeRange[j];\n            let next = unixTimeRange[j + 1];\n            // console.log(`${current} ${unixTime} ${next}`);\n            if (unixTime >= current && unixTime < next) {\n                // console.log('match time');\n                for (let k = 0; k < requestedUri.length; ++k) {\n                    if (uri === requestedUri[k]) {\n                        result.data[k].traffic[j] += 1;\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n    result.labels.pop();\n    result.unixTimeLabels.pop();\n    console.log(result);\n    return result;\n}\n\nexport default TrafficStatistic;","import React from 'react';\nimport { Dropdown, Table, Form, Button, Spinner, Row, Col, Alert } from 'react-bootstrap';\nimport style from './TrafficStatistic.module.css';\n\nclass RealTimeMonitor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: null,\n            loading: false,\n            data: null,\n            error: false,\n        };\n        this.realtimeHandler = null;\n        this.interval = 60000;  // default update traffic by every 60s\n    }\n\n    getRealTimeData = () => {\n        this.setState({ loading: true });\n        fetch('http://ec2-54-152-230-158.compute-1.amazonaws.com:8000/api/play/realtime?limit=50')\n            .then((res) => {\n                if (res.json) {\n                    return res.json().then((json) => {\n                        return res.ok ? json : Promise.reject(json);\n                    });\n                } else {\n                    Promise.reject('No JSON exist!');\n                }\n            })\n            .then((result) => {\n                console.log(result);\n                this.setState({\n                    data: result,\n                    loading: false,\n                    error: false,\n                });\n            })\n            .catch((err) => {\n                console.log(err);\n                this.setState({\n                    content: null,\n                    loading: false,\n                    error: true,\n                });\n            });\n    }\n\n    handleGet = (ms) => {\n        if (ms) {\n            this.realtimeHandler = setInterval(this.getRealTimeData, ms);\n        }\n    }\n    handleRemove = () => {\n        clearInterval(this.realtimeHandler);\n    }\n    handleUpdate = (newMs) => {\n        this.interval = newMs;\n        this.handleRemove();\n        this.handleGet(this.interval);\n    }\n\n    handleRefresh = () => {\n        this.handleRemove();\n        this.getRealTimeData();\n        this.handleGet(this.interval);\n    }\n\n    componentDidMount() {\n        this.getRealTimeData();\n        this.handleGet(this.interval);\n    }\n    componentWillUnmount() {\n        this.handleRemove();\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className={style.title}>My Real Time Monitor</h1>\n                <RealTimeTable\n                    data={this.state.data}\n                    loading={this.state.loading}\n                    error={this.state.error}\n                    msHandler={this.handleUpdate}\n                    refreshHandler={this.handleRefresh}\n                />\n            </div>\n        );\n    }\n}\n\nclass RealTimeTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: [],\n            columnEnabled: {\n                id: true,\n                jobID: false,\n                date: true,\n                host: true,\n                uri: true,\n                method: true,\n                sourceip: false,\n                protocol: false,\n                secure: false,\n                header: false,\n            },\n            remainTime: 60,\n            never: false,\n        };\n        this.updateTime = 60;\n        this.remainTime = 60;\n        this.refreshTimeHandler = null;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.data) {\n            this.handleContent(nextProps.data);\n        }\n        if (nextProps.error === true) {\n            this.setState({ error: true });\n        }\n    }\n    componentDidMount() {\n        this.handleRefreshTimeDisplay();\n    }\n    componentWillUnmount() {\n        this.handleRemoveRefresh();\n    }\n\n    handleContent = (data) => {\n        if (data) {\n            let content = [];\n            data.forEach((row) => {\n                content.push(this.handleRow(row));\n            });\n            this.setState({ content: content, error: false });\n        }\n    }\n\n    handleRow = (row) => {\n        let rowTime = new Date(row.utime * 1000);\n        let date = `${rowTime.getMonth() + 1}/${rowTime.getDate()} ${rowTime.getHours()}:${rowTime.getMinutes()}:${rowTime.getSeconds()}`;\n        let col = this.state.columnEnabled;\n        return (\n            <tr key={row.id}>\n                {col.id && <td>{row.id}</td>}\n                {col.jobID && <td>{row.jobs}</td>}\n                {col.date && <td>{date}</td>}\n                {col.host && <td style={{ maxWidth: '150px' }}>{row.host}</td>}\n                {col.uri && <td style={{ maxWidth: '150px' }}>{row.uri}</td>}\n                {col.protocol && <td>{row.protocol}</td>}\n                {col.secure && <td>{row.secure === 0 ? 'False' : 'True'}</td>}\n                {col.method && <td style={{ maxWidth: '50px' }}>{row.method}</td>}\n                {col.sourceip && <td style={{ maxWidth: '110px' }}>{row.sourceip}</td>}\n                {col.header && <td style={{ maxWidth: '150px' }}>{row.header}</td>}\n            </tr>\n        );\n    };\n\n    addCheckBoxes = () => {\n        let col = this.state.columnEnabled;\n        let content = [];\n        Object.keys(col).forEach(key => {\n            content.push(\n                <div className={style.item} key={`column::${key}`}>\n                    <Form.Check\n                        onChange={this.handleCheckBox}\n                        type={'checkbox'}\n                        id={`column::${key}`}\n                        label={key}\n                        checked={col[key]}\n                        className={style.checkBox}\n                    />\n                </div>\n            );\n        });\n        return content;\n    }\n\n    handleCheckBox = (e) => {\n        if (e.target.id && e.target.id !== '') {\n            let col = this.state.columnEnabled;\n            let columnName = e.target.id.split('::')[1];\n            col[columnName] = e.target.checked;\n            this.setState({ columnEnabled: col });\n            this.handleContent(this.props.data);\n        }\n    }\n\n    handleRefresh = () => {\n        this.props.refreshHandler();\n        this.remainTime = this.updateTime;\n    }\n\n    handleUpdateTime = (e) => {\n        let value = e.target.options[e.target.selectedIndex].value;\n        if (value !== 'never') {\n            let s = parseInt(value);\n            this.updateTime = this.remainTime = s;\n            this.props.msHandler(s * 1000);\n            if (this.state.never === true) {\n                this.handleRefreshTimeDisplay();\n                this.setState({ never: false });\n            }\n        } else {\n            this.props.msHandler(null);\n            this.handleRemoveRefresh();\n            this.setState({ never: true });\n        }\n    }\n\n    handleRefreshTimeDisplay = () => {\n        this.refreshTimeHandler = setInterval(() => {\n            if (this.remainTime <= 0) {\n                this.remainTime = this.updateTime;\n            }\n            --this.remainTime;\n            this.setState({ remainTime: this.remainTime });\n        }, 1000);\n    }\n    handleRemoveRefresh = () => {\n        clearInterval(this.refreshTimeHandler);\n    }\n\n    handleAlert = () => {\n        this.setState({ error: false });\n    }\n\n    render() {\n        let col = this.state.columnEnabled;\n        return (\n            <div>\n                <Row>\n                    <Col xs={12} sm={6} lg={3}>\n                        <label\n                            htmlFor=\"columns-dropdown\"\n                            className={style.optionLabel}\n                        >\n                            Display Columns:\n                        </label>\n                        <Dropdown>\n                            <Dropdown.Toggle\n                                variant=\"outline-dark\"\n                                id=\"columns-dropdown\"\n                                disabled={this.props.loading ? true : false}\n                                className={style.dropdownBtn}\n                            >\n                                Select Columns\n                            </Dropdown.Toggle>\n                            <Dropdown.Menu className={style.dropdownMenu}>\n                                {this.addCheckBoxes()}\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Col>\n                    <Col xs={12} sm={6} lg={3}>\n                        <label\n                            htmlFor=\"update-time\"\n                            className={style.optionLabel}\n                        >\n                            Update By:\n                        </label>\n                        <Form.Control as=\"select\" id=\"update-time\" onChange={this.handleUpdateTime} disabled={this.props.loading ? true : false} defaultValue='60'>\n                            <option value='10'>10 seconds</option>\n                            <option value='20'>20 seconds</option>\n                            <option value='30'>30 seconds</option>\n                            <option value='45'>45 seconds</option>\n                            <option value='60'>60 seconds</option>\n                            <option value='120'>120 seconds</option>\n                            <option value='300'>300 seconds</option>\n                            <option value='never'>Never</option>\n                        </Form.Control>\n                    </Col>\n                    <Col xs={12} sm={6} lg={3}>\n                        <label htmlFor=\"refresh\" className={style.optionLabel}>\n                            Refresh\n                        </label>\n                        <Button\n                            id='refresh'\n                            variant=\"primary\"\n                            className={style.applyBtn}\n                            disabled={this.props.loading ? true : false}\n                            onClick={this.handleRefresh}\n                        >\n                            {this.props.loading\n                                ? (<Spinner animation=\"border\" size=\"sm\" />)\n                                : ('Refresh')\n                            }\n                        </Button>\n                        <div style={{ textAlign: 'center' }}>\n                            {!this.state.never\n                                ? <span>Will Refresh in <span>{this.state.remainTime}</span>s</span>\n                                : <span>Never Refresh Automatically</span>\n                            }\n                        </div>\n                    </Col>\n                </Row>\n\n                <div className={style.tableContainer}>\n                    {!this.state.error ?\n                        <Table striped bordered hover size=\"sm\" responsive className={style.myTable}>\n                            <thead className=\"thead-dark\">\n                                <tr>\n                                    {col.id && <th>ID</th>}\n                                    {col.jobID && <th>Job ID</th>}\n                                    {col.date && <th>Time</th>}\n                                    {col.host && <th>Host</th>}\n                                    {col.uri && <th>Uri</th>}\n                                    {col.protocol && <th>Protocol</th>}\n                                    {col.secure && <th>Secure</th>}\n                                    {col.method && <th>Method</th>}\n                                    {col.sourceip && <th>Source IP</th>}\n                                    {col.header && <th>Header Info</th>}\n                                </tr>\n                            </thead>\n                            <tbody>{this.state.content}</tbody>\n                        </Table>\n                        :\n                        <Alert\n                            variant=\"danger\"\n                            onClose={this.handleAlert}\n                            dismissible\n                            className={style.alertBox}\n                        >\n                            <Alert.Heading>Error</Alert.Heading>\n                            <p>Server Not Connected!</p>\n                        </Alert>\n                    }  \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default RealTimeMonitor;","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport TemplateStyles from \"./TemplateStyles\";\n\n//This button template is used to navigate backwards in the app.\nfunction BackNavButton(props) {\n  let history = useHistory();\n  return (\n    <button\n      onClick={() => {\n        history.goBack();\n      }}\n      className={TemplateStyles.BackNavButton}\n    >\n      Back\n    </button>\n  );\n}\n\nexport default BackNavButton;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport HTTPServiceButton from \"./HTTPServices/HTTPServiceButton\";\nimport BackNavButton from \"./BackNavButton\";\n\nclass CreateJob extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jobName: \"name\",\n      active: 0,\n      jobStart: 0,\n      jobStop: 0,\n      secure: \"#1#\",\n      protocol: \"\",\n      host: \"hostname\",\n      uri: \"uri\",\n      method: \"method\",\n      sourceip: \"1.1.1.1\"\n    };\n  }\n\n  onChange(e) {\n    e.preventDefault();\n    let inputName = e.target.name;\n    let stateValue = e.target.value;\n    //if no invalid chars are detected\n    let invalidCharTest = /[^1234567890]/g.test(stateValue);\n    let stateNumberValue = Number(stateValue);\n    if (\n      (inputName === \"jobStart\" ||\n        inputName === \"jobStop\" ||\n        inputName === \"active\") &&\n      !invalidCharTest\n    ) {\n      switch (inputName) {\n        case \"jobStart\":\n          this.setState({ jobStart: stateNumberValue });\n          break;\n        case \"jobStop\":\n          this.setState({ jobStop: stateNumberValue });\n          break;\n        case \"active\":\n          this.setState({ active: stateNumberValue });\n          break;\n      }\n    } else {\n      switch (inputName) {\n        case \"secure\":\n          this.setState({ secure: stateValue });\n          break;\n        case \"protocol\":\n          this.setState({ protocol: stateValue });\n          break;\n        case \"host\":\n          this.setState({ hostname: stateValue });\n          break;\n        case \"uri\":\n          this.setState({ uri: stateValue });\n          break;\n        case \"method\":\n          this.setState({ method: stateValue });\n          break;\n        case \"sourceip\":\n          this.setState({ sourceip: stateValue });\n          break;\n      }\n    }\n  }\n\n  callMeMaybe = () => {\n    const history = useHistory();\n    history.push(\"/\");\n  };\n  buildForm = () => {\n    // This function builds a dynamic form.\n    let keys = Object.keys(this.state);\n\n    let form = keys.map(key => {\n      //Never give the user the ability to set jobId\n      //return null in that case\n\n      if (key === \"secure\") {\n        return (\n          <React.Fragment>\n            <h2>{key}</h2>\n            <select\n              name={key}\n              type=\"text\"\n              value={this.state[key]}\n              onChange={e => this.onChange(e)}\n              placeholder=\"enter a value\"\n            >\n              <option>#1#</option>\n              <option>#2#</option>\n              <option>#3#</option>\n            </select>\n          </React.Fragment>\n        );\n      } else\n        return (\n          <React.Fragment>\n            <h2>{key}</h2>\n            <input\n              name={key}\n              type=\"text\"\n              value={this.state[key]}\n              onChange={e => this.onChange(e)}\n              placeholder=\"enter a value\"\n            />\n          </React.Fragment>\n        );\n    });\n    return form;\n  };\n\n  render = () => {\n    // This function builds a dynamic form.\n    let keys = Object.keys(this.state);\n    let httpServiceButton = (\n      <HTTPServiceButton\n        HTTPService={this.props.HTTPService}\n        APIEndPoint={this.props.APIEndPoint}\n        data={this.state}\n        route=\"/\"\n        callMeMaybe={this.callMeMaybe}\n      />\n    );\n\n    let retVal = (\n      <div>\n        <h6>Don's SQL inject me please. </h6>\n        <p>\n          On a serious note, this form does not have validation built into it.\n          It will down the line, but the server DB will accept values for all\n          fields seen below, even ones that are not valid.\n        </p>\n        {this.buildForm()}\n        <br></br>\n        {httpServiceButton}\n        <BackNavButton />\n      </div>\n    );\n\n    return retVal;\n  };\n}\n\nexport default CreateJob;\n","import \"./PlaybackStyles.css\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Body from \"../Body/BodyModule\";\nimport Navbar from \"../Nav/Navbar\";\nimport HTTPClientEndPoint from \"../ComponentTemplates/HTTPServices/HTTPClientEndPoint\";\nimport HTTPClientFunctions from \"../ComponentTemplates/HTTPServices/HTTPClientFunctions\";\nimport RunJobs from \"../ComponentTemplates/RunJobs\";\nimport Routes from \"./Routes\";\nimport ConfigureJob from \"../ConfigureJob/configureJob\";\nimport { func } from \"prop-types\";\nimport TrafficStatistic from \"../StatisticSite/TrafficStatistic\";\nimport RealTimeMonitor from \"../StatisticSite/RealTime\";\nimport CreateJob from \"../ComponentTemplates/CreateJob\";\n\nclass PlayBack extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let HTTPService = new HTTPClientEndPoint();\n    HTTPService.registerUrlStateHandler(Routes.init, HTTPClientFunctions.init);\n    HTTPService.registerUrlStateHandler(\n      Routes.run,\n      HTTPClientFunctions.runplayback\n    );\n    HTTPService.registerUrlStateHandler(\n      Routes.createjob,\n      HTTPClientFunctions.createjob\n    );\n\n    this.state = {\n      //Completed and InProgress URLS and job lists will be supplied by the database\n      //For now they are hardcoded in.\n      jobs: [],\n      HTTPService: HTTPService\n    };\n  }\n\n  componentDidMount() {\n    this.state.HTTPService.init().then(resp => {\n      this.setState({\n        jobs: resp.jobs\n      });\n    });\n  }\n  //This app builds many dynamic routes.\n  //buildDynamicRoutes is the function responsible for accomplishing this.\n  // All dynamic routes are built here as opposed to grouping off each set of dynamic\n  // routes into their own function for convinience. Each set of routes is  demarcated\n  // by comments.\n\n  //The render function renders the navbar which at this point is static\n  //The render function also returns a Body component.\n  // In the body component we then render routes such as\n  // /completedjobs, /inprogressjobs, and etc.\n  render() {\n    //if (this.state.reRender) alert(JSON.stringify(this.state));\n    return (\n      <Router>\n        <Navbar navLinks={this.props.navLinks} />\n        <Body>\n          <Switch>\n            <Route exact path=\"/\">\n              <div>\n                <h1>Notes</h1>\n                <div>\n                  {\" \"}\n                  We are in the progress of designing live updates to the front\n                  end. For example,if you create a new job and head over to the\n                  run jobs tab without exiting, then the app wiil not display\n                  the new job created. Just reload the app if this is the case.\n                  We'll add this realtime update to the app soon.Also, some\n                  forms do not validate input nor does the server validate their\n                  unvalidated input, so SQL injection and phony values are all\n                  possible. We're working on this. There's also misc\n                  inconsitencies like scroll bar not resetting. We'll fix this.\n                </div>\n              </div>\n            </Route>\n            <Route exact path=\"/runcapture\">\n              <RunJobs\n                jobs={this.state.jobs}\n                HTTPService={this.state.HTTPService}\n              />\n            </Route>\n            <Route exact path=\"/createjob\">\n              <CreateJob\n                APIEndPoint={Routes.createjob}\n                HTTPService={this.state.HTTPService}\n              ></CreateJob>\n            </Route>\n            <Route exact path=\"/stats\" component={TrafficStatistic}></Route>\n            <Route exact path=\"/realtime\" component={RealTimeMonitor}></Route>\n          </Switch>\n        </Body>\n      </Router>\n    );\n  }\n}\n\nexport default PlayBack;\n","import React from \"react\";\nimport \"./App.css\";\nimport PlayBack from \"./Components/Playback/Playback\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PlayBack\n          navLinks={[\n            { title: \"Home\", route: \"/\" },\n            { title: \"Create A Job\", route: \"/createjob\" },\n            {\n              title: \"Run a Job\",\n              route: \"/runcapture\"\n            },\n            { title: \"Statistic\", route: \"/stats\" },\n            { title: \"Real Time\", route: \"/realtime\" }\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TrafficStatistic_title__3a9Xy\",\"tableContainer\":\"TrafficStatistic_tableContainer__Om6UY\",\"myTable\":\"TrafficStatistic_myTable__3tosw\",\"chartContainer\":\"TrafficStatistic_chartContainer__2jCur\",\"item\":\"TrafficStatistic_item__x9QW9\",\"itemNone\":\"TrafficStatistic_itemNone__2A0At\",\"checkBox\":\"TrafficStatistic_checkBox__dsSQj\",\"dateInput\":\"TrafficStatistic_dateInput__3CHqI\",\"dropdownBtn\":\"TrafficStatistic_dropdownBtn__1jzzb\",\"dropdownMenu\":\"TrafficStatistic_dropdownMenu__3Oc3P\",\"optionContainer\":\"TrafficStatistic_optionContainer__15rpr\",\"optionLabel\":\"TrafficStatistic_optionLabel__1s4ea\",\"applyBtn\":\"TrafficStatistic_applyBtn__Ax5jn\",\"alertBox\":\"TrafficStatistic_alertBox__3nKZB\"};"],"sourceRoot":""}